"""
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6"""

# class Solution:
#     def runningSum(self, nums: List[int]) -> List[int]:
#         return [sum(nums[:i+1]) for i in range(len(nums))]
# Solution 2:
# The same logic as above, this time using enumerate().

# class Solution:
#     def runningSum(self, nums: List[int]) -> List[int]:
# 		return [sum(nums[:i]) for i, e in enumerate(nums, 1)]
# Solution 3:
# Using in-built function, itertools.accumulate().

# class Solution:
#     def runningSum(self, nums: List[int]) -> List[int]:
# 		return accumulate(nums)

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        result = []
        total = 0
        for i in range(len(nums)):
            total += nums[i]
            result.append(total)
        return result
